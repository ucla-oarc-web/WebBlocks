<form class="form" id="compiler-config-form">

	<fieldset id="modules">

		<h4>Select Modules</h4>
		
		<p>WebBlocks can be built with only certain <a href="#API/Modules" target="_blank">modules</a>. Each module establishes certain CSS classes and Javascript functionality. Click (?) for more details about an individual module.</p>

		<ul class="modules-select unstyled">
			<%
			var moduleSet = DOC.modules.getAll();
			var moduleName, moduleData, marginLeft;
			for(var i in moduleSet){
				moduleName = i;
				moduleData = moduleSet[i];
				marginLeft = moduleName.match(/\//g)
				marginLeft = (marginLeft ? marginLeft.length*20 : 0) + 20
			%>
			<li class="control" style="margin-left:<%= marginLeft %>px">
				<input type="checkbox" data-module="<%= moduleName %>"
					   <% if(moduleData.requires){ %>
					   data-module-requires="<%= moduleData.requires.join(' ') %>"
					   <% } %>
					   > 
				<% if(moduleData.api){ %>
				<%= moduleName %> 
				<a href="#API/<%= moduleData.api %>" target="_blank">(?)</a>
				<% }else{ %>
				<em><%= moduleName %></em>
				<% } %>
			</li>
			<% } %>
		</ul>
	
	</fieldset>
	
	<fieldset id="debug-mode">
		
		<h4>Debug Mode</h4>
		
		<p>If debug mode is turned on, WebBlocks will be built without being minified. Minification is the process of stripping out whitespace, comments and other marks that only exist for legibility.</p>
		
		<div class="control">
			<select>
				<option value="yes">Yes</option>
				<option value="no" selected>No</option>
			</select>
		</div>
        
    </fieldset>
	
	<fieldset id="extensions">
		
		<h4>Extensions</h4>
		
		<p>An extension is a set of libraries that modifies the presentation or behavior of WebBlocks.</p>
		
		<ul class="unstyled">
			
		<%

		var extensions = {
			'implicit-html':{'name':'Implicit HTML - Add WebBlocks semantics to HTML elements instead of requiring classes'},
			'flat-ui':{'name':'Flat UI - Flat interface without borders, shadows or gradients'}
		}

		for(var key in extensions){

		%>

		<li class="control">
			<input type="checkbox" data-extension="<%= key %>"<%= extensions[key].default ? ' checked' : '' %>>
			<%= extensions[key].name %> 
			<a href="<%= extensions[key].api %>" target="_blank"></a>
		</li>

		<% } %>

		</ul>
		
	</fieldset>
	
	<fieldset id="packages">
		
		<h4>Packages</h4>
		
		<p>A package is a third-party extension that can be compiled with WebBlocks. Note that some packages (namely jQuery) are required for other tools and, if not included here, then they must be included separately.</p>
		
		<ul class="unstyled">
			
		<%

		var packages = {
			':jquery':{'name':'jQuery - Requisite Javascript framework for WebBlocks','url':'http://jquery.com','default':true},
			':modernizr':{'name':'Modernizr - Browser capability detection with IE shim for HTML5','url':'http://modernizr.com','default':true},
			':respond':{'name':'Respond.js - Media Query polyfill [IE6-8]','url':'https://github.com/scottjehl/Respond','default':true},
			':selectivizr':{'name':'Selectivizr -  CSS3 pseudo-class and attribute selectors polyfill [IE6-8]','url':'http://selectivizr.com','default':true},
			':efx':{'name':'Efx - Target-trigger effects through pure markup','url':'http://github.com/ebollens/efx','default':true},
			':lettering':{'name':'Lettering.js - Typography control by letter/word/paragraph','url':'http://letteringjs.com'}
		}

		for(var key in packages){

		%>

		<li class="control">
			<input type="checkbox" data-package="<%= key %>"<%= packages[key].default ? ' checked' : '' %>>
			<%= packages[key].name %> 
			<a href="<%= packages[key].api %>" target="_blank">(?)</a>
		</li>

		<% } %>

		</ul>
		
	</fieldset>
	
	<fieldset id="bootstrap-adapter">
		
		<h4>Bootstrap Adapter</h4>
		
		<p>If compiled with the Bootstrap adapter, WebBlocks will bridge itself with <a href="http://getbootstrap.com" target="_blank">Twitter Bootstrap</a>. This allows one to simply substitute the WebBlocks CSS and Javascript files in place of the Twitter Bootstrap CSS and JS files and then to use both the Twitter Bootstrap and WebBlocks semantics.</p>
		
		<div class="control">
			<select>
				<option value="yes">Yes</option>
				<option value="no">No</option>
			</select>
		</div>
		
		<div id="bootstrap-plugins">
			
			<p>When compiled with the Bootstrap adapter, one may specify Twitter Bootstrap Javascript plugins to include:</p>
			
			<ul class="unstyled">
			
			<%
			
			var bootstrap_plugins = {
				'affix':{'name':'Affix','api':'affix'},
				'alert':{'name':'Alert','api':'alerts'},
				'button':{'name':'Button','api':'button'},
				'carousel':{'name':'Carousel','api':'carousel'},
				'collapse':{'name':'Collapse','api':'collapse'},
				'dropdown':{'name':'Dropdown','api':'dropdowns'},
				'modal':{'name':'Modal','api':'modal'},
				'popover':{'name':'Popover','api':'popover'},
				'scrollspy':{'name':'Scrollspy','api':'scrollspy'},
				'tab':{'name':'Tab','api':'tabs'},
				'tooltip':{'name':'Tooltip','api':'tooltips'},
				'transition':{'name':'Transitions','api':'transitions'},
				'typeahead':{'name':'Typeahead','api':'typeahead'}
			}, 
			bootstrap_js_docs = 'http://twitter.github.com/bootstrap/javascript.html#';
			
			for(var key in bootstrap_plugins){
			
			%>
			
			<li class="control">
				<input type="checkbox" data-bootstrap-plugin="<%= key %>">
				<%= bootstrap_plugins[key].name %> 
				<a href="<%= bootstrap_js_docs + bootstrap_plugins[key].api %>" target="_blank">(?)</a>
			</li>
			
			<% } %>
			
			</ul>
			
		</div>
		
	</fieldset>
	
	<h3>All Ready?</h3>
	
	<p>With all of configuration options now specified, click below to generate your custom <code>Rakefile-config.rb</code>.</p>
	
	<p><input type="submit" class="info button" value="Create Configuration File"></p>
	
	<div id="output" style="display:none; padding-top:0.5em;">

		<div class="control">
			<textarea class="full" id="ruby" style="height:6em"></textarea>
            <p>This code should be placed in <code>/Rakefile-config.rb</code></p>
		</div>

		<div class="control">
			<textarea class="full" id="json" style="height:6em; display:none;"></textarea>
		</div>
	
	</div>

</form>

<script>
	$('.modules-select input[type=checkbox]').change(function(){
		
		var checked = [], required = [], children = [], $this, temp, tempString
		
		$('.modules-select input[type=checkbox]:disabled').each(function(){
			$this = $(this)
			$this.removeAttr('disabled');
			if(!$this.hasClass('selected'))
				$this.removeAttr('checked')
		})
		
		$('.modules-select input[type=checkbox]').removeClass('selected')
		
		$('.modules-select input[type=checkbox]:checked').each(function(){
			$this = $(this)
			$this.addClass('selected')
			checked.push($this.attr('data-module'))
			if($this.attr('data-module-requires')){
				$.each($this.attr('data-module-requires').split(' '), function(){
					if($.inArray(this, required) == -1)
						required.push(this)
				})
			}
		})
		
		$('.modules-select input[type=checkbox]').each(function(){
			$this = $(this).attr('data-module')
			$.each(checked, function(){
				if($this.indexOf(this == '' ? '' : (this+'/')) === 0 && this != $this)
					if($.inArray($this, children) == -1)
						children.push($this)
			})
			$.each(required, function(){
				if($this.indexOf(this == '' ? '' : (this+'/')) === 0 && this != $this)
					if($.inArray($this, children) == -1)
						children.push($this)
			})
		})
		
		$.each(required, function(){
			$this = $('.modules-select input[type=checkbox][data-module="'+this+'"]')
			$this.attr('checked', true)
			$this.attr('disabled', true)
		})
		
		$.each(children, function(){
			$this = $('.modules-select input[type=checkbox][data-module="'+this+'"]')
			$this.attr('checked', true)
			$this.attr('disabled', true)
		})
		
	})
	
	$('#bootstrap-adapter select').change(function(){
		if($(this).val() == 'yes'){
			$('#bootstrap-plugins:not(:visible)').slideDown()
		}else{
			$('#bootstrap-plugins input[type=checkbox]').removeAttr('checked')
			$('#bootstrap-plugins:visible').slideUp()
		}
	})
	
	$('#compiler-config-form').submit(function(e){
		
		e.preventDefault()
		
		/**
		 * Generate Structure
		 */
		
		var options = {
			'build':{
				'packages': []
			}, 
			'src':{
				'adapter': false
			}, 
			'package':{
				
			}
		}
		
		$('.modules-select input[type=checkbox]:checked:not(:disabled)').each(function(){
			if(!options.src.modules) options.src.modules = []
			options.src.modules.push($(this).attr('data-module'))
		})
		
		$('#extensions input[type=checkbox]:checked').each(function(){
			if(!options.src.extensions) options.src.extensions = []
			options.src.extensions.push($(this).attr('data-extension'))
		})
		
		if($('#bootstrap-adapter select').first().val() == 'yes'){
			if(!options.src.adapter) options.src.adapter = []
			options.src.adapter.push('bootstrap')
			options['package'].bootstrap = {}
			options['package'].bootstrap.scripts = []
			$('#bootstrap-plugins input[type=checkbox]:checked').each(function(){
				options['package'].bootstrap.scripts.push($(this).attr('data-bootstrap-plugin'))
			})
		}
		
		$('#packages input[type=checkbox]:checked').each(function(){
			options.build.packages.push($(this).attr('data-package'))
		})
		
		$('#debug-mode select').each(function(){
			if(!options.build) options.build = []
			options.build.debug = $(this).val() == 'yes' ? true : false
		})
		
		/**
		 * Basic Output
		 */
		
		$('#output').show()
		$('#output textarea').val('')
		
		$('#output #json').val(JSON.stringify(options))
		
		/**
		 * Ruby Output
		 */
		
		var output = [], str, arr
		
		if(options.src.modules){
			arr = []
			$.each(options.src.modules, function(){
				if(this.indexOf(' ') != -1 || this.indexOf('"') != -1)
					return;
				arr.push(this)
			})
			output.push('WebBlocks.config[:src][:modules] = ["'+arr.join('","')+'"]');
		}
		
		if(options.src.adapter){
			
			arr = []
			$.each(options.src.adapter, function(){
				if(this.indexOf(' ') != -1 || this.indexOf('"') != -1)
					return;
				arr.push(this)
			})
			output.push('WebBlocks.config[:src][:adapter] = ["'+arr.join('","')+'"]');
			
			if($.inArray('bootstrap', options.src.adapter) >= 0){
				arr = []
				$.each(options['package'].bootstrap.scripts, function(){
					if(this.indexOf(' ') != -1 || this.indexOf('"') != -1)
						return;
					arr.push(this)
				})
				output.push('WebBlocks.config[:package][:bootstrap][:scripts] = ["'+arr.join('","')+'"]')
			}
			
		}else{
			output.push('WebBlocks.config[:src][:adapter] = false')
		}
		
		if(options.build.packages){
			arr = []
			$.each(options.build.packages, function(){
				if(this.indexOf(' ') != -1 || this.indexOf(':') !== 0)
					return;
				arr.push(this)
			})
			output.push('WebBlocks.config[:build][:packages] = ['+arr.join(',')+']');
		}
        
        if(options.build.debug){
            output.push('WebBlocks.config[:build][:debug] = true')
        }
		
		if(options.src.extensions && options.src.extensions.length > 0){
				arr = []
				$.each(options.src.extensions, function(){
					if(this.indexOf(' ') != -1 || this.indexOf('"') != -1)
						return;
					arr.push(this)
				})
			output.push('WebBlocks.config[:src][:extensions] = ["'+arr.join('","')+'"]');
		}
		
		$('#output #ruby').val(output.join('\n'))
	})
</script>
